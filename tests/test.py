with open(r'\Users\urijo\Documents\Python\rust\app\src\main.rs', 'w') as f:
    f.write('''
use std::fs;\nuse std::path::PathBuf;\nuse std::sync::{Arc, Mutex};\nuse std::thread;\nuse std::env;\n\nfn search_files(directory: &str, search_term: Arc<String>) -> Vec<PathBuf> {\n    let paths = Arc::new(Mutex::new(Vec::new()));\n    let search_term_inner = search_term.clone();\n\n    let walker = fs::read_dir(directory).expect(\"Failed to read directory\");\n\n    let handles: Vec<_> = walker\n        .filter_map(|entry| {\n            let entry = entry.ok()?;\n            let path = entry.path();\n            if path.is_dir() {\n                return Some(thread::spawn(move || search_files(&path.to_string_lossy(), search_term_inner.clone())));\n            }\n            if path.is_file() {\n                let term = search_term_inner.clone();\n                let paths_clone = paths.clone();\n                Some(thread::spawn(move || {\n                    if fs::read_to_string(&path)\n                        .unwrap()\n                        .to_lowercase()\n                        .contains(&term.to_lowercase())\n                    {\n                        paths_clone.lock().unwrap().push(path.clone());\n                    }\n                    paths_clone\n                }) as thread::JoinHandle<_>)\n            } else {\n                None\n
 }\n        })\n        .collect();\n\n    let mut results = Vec::new();\n    for handle in handles {\n        let result = handle.join().expect(\"Failed to join thread\");\n        results.extend(result.lock().unwrap().clone());\n    }\n\n    results\n}\n\nfn main() {\n    let args: Vec<String> = env::args().skip(1).collect();\n    if args.len() < 2 {\n        println!(\"Usage: ./file_search <directory> <search_term>\");\n        return;\n    }\n    let search_directory = &args[0];\n    let search_term = Arc::new(args[1].to_owned());\n    let found_files = search_files(search_directory, search_term.clone());\n    println!(\"Found {} file(s):\", found_files.len());\n    for file in found_files {\n        println!(\"{}\", file.display());\n    }\n}\n
''')
